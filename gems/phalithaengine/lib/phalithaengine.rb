require "phalithaengine/version"

begin
  require 'rack'
  require 'nokogiri'
  require 'openssl'
rescue LoadError
  gem 'rack'
  gem 'nokogiri'
  gem 'openssl'
end

#test=PhalithaEngine.new
#puts test.getRandomKeyAndIVForAES256
#test.setup("887f5b14e6f789a282c583726c18f9e9b6f2d62c78872318c0f4c11e815deb3f","c4d72089d73800fee7fd29709144ec6b")
#test.xmlparser("source.xml","output.xml",[{:xpath => "//root/routers/router/data/ip", :senstivity => "AES256"},{:xpath => "//root/switches/switch/data/mask", :senstivity => "AES256"}])
#puts test.decrypt("8aa999ecbc61b36eb28020892e1c948c")

class PhalithaEngine
  @@key="^$^|^$^~^$^|^$^h^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^c^$^|^$^~^$^|^$^u^$^|^$^~^$^|^$^|^$^~^$^|^$^o^$^|^$^~^$^|^$^m^$^|^$^~^$^|^$^$^|^$^~^$^|^$^r^$^|^$^~^$^|^$^k^$^|^$^~^$^|^$^$^|^$^~^$^|^$^y^$^|^$^~^$^|^$^h^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^c^$^|^$^~^$^|^$^u^$^|^$^~^$^|^$^|^$^~^$^|^$^o^$^|^$^~^$^|^$^m^$^|^$^~^$^|^$^$^|^$^~^$^|^$^r^$^|^$^~^$^|^$^k^$^|^$^~^$^|^$^$^|^$^~^$^|^$^y^$^|^$^~^$^|^$^h^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^c^$^|^$^~^$^|^$^u^$^|^$^~^$^|^$^|^$^~^$^|^$^o^$^|^$^~^$^|^$^m^$^|^$^~^$^|^$^$^|^$^~^$^|^$^r^$^|^$^~^$^|^$^k^$^|^$^~^$^|^$^$^|^$^~^$^|^$^y^$^|^$^~^$^|^$^h^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^c^$^|^$^~^$^|^$^u^$^|^$^~^$^|^$^|^$^~^$^|^$^o^$^|^$^~^$^|^$^m^$^|^$^~^$^|^$^$^|^$^~^$^|^$^r^$^|^$^~^$^|^$^k^$^|^$^~^$^|^$^$^|^$^~^$^|^$^y^$^|^$^~^$^|^$^h^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^c^$^|^$^~^$^|^$^u^$^|^$^~^$^|^$^|^$^~^$^|^$^o^$^|^$^~^$^|^$^m^$^|^$^~^$^|^$^$^|^$^~^$^|^$^r^$^|^$^~^$^|^$^k^$^|^$^~^$^|^$^$^|^$^~^$^|^$^y^$^|^$^~^$^|^$^h^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^c^$^|^$^~^$^|^$^u^$^|^$^~^$^|^$^|^$^~^$^|^$^o^$^|^$^~^$^|^$^m^$^|^$^~^$^|^$^$^|^$^~^$^|^$^r^$^|^$^~^$^|^$^k^$^|^$^~^$^|^$^$^|^$^~^$^|^$^y^$^|^$^~^$^|^$^h^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^c^$^|^$^~^$^|^$^u^$^|^$^~^$^|^$^|^$^~^$^|^$^o^$^|^$^~^$^|^$^m^$^|^$^~^$^|^$^$^|^$^~^$^|^$^r^$^|^$^~^$^|^$^k^$^|^$^~^$^|^$^$^|^$^~^$^|^$^y^$^|^$^~^$^|^$^h^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^c^$^|^$^~^$^|^$^u^$^|^$^~^$^|^$^|^$^~^$^|^$^o^$^|^$^~^$^|^$^m^$^|^$^~^$^|^$^$^|^$^~^$^|^$^r^$^|^$^~^$^|^$^k^$^|^$^~^$^|^$^$^|^$^~^$^|^$^y^$^|^$^~^$^|^$^h^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^c^$^|^$^~^$^|^$^u^$^|^$^~^$^|^$^|^$^~^$^|^$^o^$^|^$^~^$^|^$^m^$^|^$^~^$^|^$^$^|^$^~^$^|^$^r^$^|^$^~^$^|^$^k^$^|^$^~^$^|^$^$^|^$^~^$^|^$^y^$^|^$^~^$^|^$^h^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^c^$^|^$^~^$^|^$^u^$^|^$^~^$^|^$^|^$^~^$^|^$^o^$^|^$^~^$^|^$^m^$^|^$^~^$^|^$^$^|^$^~^$^|^$^r^$^|^$^~^$^|^$^k^$^|^$^~^$^|^$^$^|^$^~^$^|^$^y^$^|^$^~^$^|^$^h^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^c^$^|^$^~^$^|^$^u^$^|^$^~^$^|^$^|^$^~^$^|^$^o^$^|^$^~^$^|^$^m^$^|^$^~^$^|^$^$^|^$^~^$^|^$^r^$^|^$^~^$^|^$^k^$^|^$^~^$^|^$^$^|^$^~^$^|^$^y^$^|^$^~^$^|^$^h^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^c^$^|^$^~^$^|^$^u^$^|^$^~^$^|^$^|^$^~^$^|^$^o^$^|^$^~^$^|^$^m^$^|^$^~^$^|^$^$^|^$^~^$^|^$^r^$^|^$^~^$^|^$^k^$^|^$^~^$^|^$^$^|^$^~^$^|^$^y^$^|^$^~^$^|^$^h^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^c^$^|^$^~^$^|^$^u^$^|^$^~^$^|^$^|^$^~^$^|^$^o^$^|^$^~^$^|^$^m^$^|^$^~^$^|^$^$^|^$^~^$^|^$^r^$^|^$^~^$^|^$^k^$^|^$^~^$^|^$^$^|^$^~^$^|^$^y^$^|^$^~^$^|^$^h^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^c^$^|^$^~^$^|^$^u^$^|^$^~^$^|^$^|^$^~^$^|^$^o^$^|^$^~^$^|^$^m^$^|^$^~^$^|^$^$^|^$^~^$^|^$^r^$^|^$^~^$^|^$^k^$^|^$^~^$^|^$^$^|^$^~^$^|^$^y^$^|^$^~^$^|^$^h^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^c^$^|^$^~^$^|^$^u^$^|^$^~^$^|^$^|^$^~^$^|^$^o^$^|^$^~^$^|^$^m^$^|^$^~^$^|^$^$^|^$^~^$^|^$^r^$^|^$^~^$^|^$^k^$^|^$^~^$^|^$^$^|^$^~^$^|^$^y^$^|^$^~^$^|^$^h^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^c^$^|^$^~^$^|^$^u^$^|^$^~^$^|^$^|^$^~^$^|^$^o^$^|^$^~^$^|^$^m^$^|^$^~^$^|^$^$^|^$^~^$^|^$^r^$^|^$^~^$^|^$^k^$^|^$^~^$^|^$^$^|^$^~^$^|^$^y"
  @@iv="^$^|^$^~^$^|^$^h^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^|^$^~^$^|^$^|^$^~^$^"
  def initialize (key=nil, iv=nil)
	setup(key,iv)
  end  
  def setup (key, iv)
	if key.nil? || key.empty? || key.size <0 
		@@key=@@key
	else
		@@key=key
	end
	
	if iv.nil? || iv.empty? || iv.size <0 
		@@iv=@@iv
	else
		@@iv=iv
	end
  end  
  def getRandomKeyAndIVForAES256
	agent=OpenSSL::Cipher::AES.new(256,:CBC)
	agent.encrypt
	return [:key => agent.random_key.unpack('H*').first, :iv => agent.random_iv.unpack('H*').first]
  end
  def encrypt (value)
	begin
		@agent=OpenSSL::Cipher::AES.new(256,:CBC)
		@agent.encrypt
		@agent.key=@@key
		@agent.iv=@@iv
		encvalue='' << @agent.update(value) << @agent.final
		str=encvalue.unpack('H*').first
		return str
	rescue
		puts $!, $@
		return false
	end
  end
  
  def decrypt(value)
	begin
		@agent=OpenSSL::Cipher::AES.new(256,:CBC)
		@agent.decrypt
		@agent.key=@@key
		@agent.iv=@@iv
		binary=value.scan(/../).map { |x| x.hex.chr }.join
		plain = '' << @agent.update(binary) << @agent.final
		return plain
	rescue
		puts $!, $@
		return false
	end
  end
  
  def xmlparser (sourcefilepath,targetfilepath,fieldoptions)
	begin
		xml_doc=Nokogiri::XML(File.open(sourcefilepath)) do |config|
			config.options = Nokogiri::XML::ParseOptions::STRICT | Nokogiri::XML::ParseOptions::NONET
		end
		
		fieldoptions.each do |option|
			if (option.key?(:xpath)) && (option.key?(:senstivity))
				if option[:senstivity].eql?"AES256"
					elements=xml_doc.xpath(option[:xpath])
					elements.each do |element|
						element.content=encrypt(element.text)
						element["accesscode"]=option[:accesscode]
					end
				end
			end
		end
		File.open(targetfilepath,"w"){ |f| f << xml_doc }
		return true
	rescue
		puts $!, $@
		return false
	end
  end
end